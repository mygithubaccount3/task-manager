{"version":3,"sources":["firebase.js","components/AddTaskForm.js","components/EditTaskForm.js","components/TaskColumnHeader.js","dragdrop.js","components/TaskColumnItems.js","App.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","AddTaskForm","triggeredForm","closeForm","onSubmit","e","preventDefault","type","document","getElementById","typeDropdown","value","random","Math","floor","collection","doc","toString","set","id","title","target","description","labels","uiDesignLabel","checked","marketingLabel","growthExperimentLabel","catch","error","alert","name","style","display","EditTaskForm","hiddenId","update","hiddenType","TaskColumnHeader","count","svg","className","icon","color","marginRight","allowDrop","classList","contains","dataTransfer","dropEffect","dragStart","setData","dropIt","sourceId","getData","sourceIdEl","sourceIdParentEl","parentElement","targetEl","targetParentEl","getAttribute","openEditTaskForm","TaskColumnItems","tasks","openForm","a","map","el","key","draggable","onDragStart","onClick","faCog","onDrop","onDragOver","charAt","toUpperCase","slice","App","useState","setTasks","setTriggeredForm","openedCount","selectedCount","runningCount","evaluatingCount","liveCount","useEffect","onSnapshot","querySnapshot","forEach","push","data","i","length","console","log","currentTarget","form","editForm","reset","faPlusCircle","faSearch","placeholder","onChange","trim","includes","items","faLightbulb","faMapSigns","faQuestionCircle","faCheckCircle","render","columnWidth","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.885eb83d.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDCvvwpLsE7dr3lU4Ehxb6un1h-LNbw_fI\",\r\n    authDomain: \"task-manager-8e28f.firebaseapp.com\",\r\n    databaseURL: \"https://task-manager-8e28f.firebaseio.com\",\r\n    projectId: \"task-manager-8e28f\",\r\n    storageBucket: \"task-manager-8e28f.appspot.com\",\r\n    messagingSenderId: \"80493297086\",\r\n    appId: \"1:80493297086:web:46b2e630260afcab9acdef\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const database = firebase.firestore();\r\n","import React from 'react';\r\nimport { database } from '../firebase';\r\n\r\nexport function AddTaskForm({ triggeredForm, closeForm }) {\r\n\r\n    function sendTask(e) {\r\n        e.preventDefault();\r\n        let type = '';\r\n        switch (triggeredForm) {\r\n            case 'submitOpenedTask':\r\n                type = 'opened';\r\n                break;\r\n            case 'submitSelectedTask':\r\n                type = 'selected';\r\n                break;\r\n            case 'submitRunningTask':\r\n                type = 'running';\r\n                break;\r\n            case 'submitEvaluatingTask':\r\n                type = 'evaluating';\r\n                break;\r\n            case 'submitLiveTask':\r\n                type = 'live';\r\n                break;\r\n            case 'menu':\r\n                type = document.getElementById('addTaskForm').typeDropdown.value;\r\n                break;\r\n        }\r\n        const random = Math.floor(Math.random() * Math.floor(100000))\r\n\r\n        database.collection(\"tasks\").doc(random.toString()).set({\r\n            id: random,\r\n            type: type,\r\n            title: e.target.title.value,\r\n            description: e.target.description.value,\r\n            labels: [\r\n                e.target.uiDesignLabel.checked ? \"UI Design\" : \"\",\r\n                e.target.marketingLabel.checked ? \"Marketing\" : \"\",\r\n                e.target.growthExperimentLabel.checked ? \"Growth Experiment\" : \"\"]\r\n        })\r\n            .catch(function(error) {\r\n                alert(\"Error adding document: \", error);\r\n            });\r\n        closeForm();\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={sendTask} id='addTaskForm'>\r\n            <label>\r\n                Title: <input type='text' name='title' />\r\n            </label>\r\n            <label>\r\n                Description: <input type='text' name='description' />\r\n            </label>\r\n            <label>\r\n                UI Design <input name=\"uiDesignLabel\" type=\"checkbox\" />\r\n            </label>\r\n            <label>\r\n                Marketing <input name=\"marketingLabel\" type=\"checkbox\" />\r\n            </label>\r\n            <label>\r\n                Growth Experiment <input name=\"growthExperimentLabel\" type=\"checkbox\" />\r\n            </label>\r\n            <select name='typeDropdown' style={{ display: 'none' }}>\r\n                <option>opened</option>\r\n                <option>selected</option>\r\n                <option>running</option>\r\n                <option>evaluating</option>\r\n                <option>live</option>\r\n            </select>\r\n            <button type='submit'>Add</button>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { database } from '../firebase';\r\n\r\nexport function EditTaskForm({ closeForm }) {\r\n    function editTask(e) {\r\n        e.preventDefault();\r\n        database.collection('tasks').doc(e.target.hiddenId.value).update({\r\n            description: e.target.description.value, id: e.target.hiddenId.value, labels: [e.target.growthExperimentLabel.checked, e.target.marketingLabel.checked, e.target.uiDesignLabel.checked], title: e.target.title.value, type: e.target.hiddenType.value\r\n        });\r\n        closeForm();\r\n    }\r\n    return (\r\n        <form onSubmit={editTask} id='editTaskForm'>\r\n            <input type='hidden' id='hiddenId' name=\"hiddenId\" />\r\n            <input type='hidden' id='hiddenType' name=\"hiddenType\" />\r\n            <label>\r\n                Title: <input type='text' name='title' />\r\n            </label>\r\n            <label>\r\n                Description: <input type='text' name='description' />\r\n            </label>\r\n            <label>\r\n                UI Design <input name=\"uiDesignLabel\" type=\"checkbox\" />\r\n            </label>\r\n            <label>\r\n                Marketing <input name=\"marketingLabel\" type=\"checkbox\" />\r\n            </label>\r\n            <label>\r\n                Growth Experiment <input name=\"growthExperimentLabel\" type=\"checkbox\" />\r\n            </label>\r\n            <button type='submit'>Edit</button>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport function TaskColumnHeader({ type, count, svg }) {\r\n    return (\r\n        <div className={`tasks__header tasks__header--${type}`}>\r\n            <div>\r\n                <FontAwesomeIcon icon={svg} color='white' style={{ marginRight: '10px' }} />\r\n                <h1 className='tasks__title'>{type}</h1>\r\n            </div>\r\n            <span className='tasks__count'>{count}</span>\r\n        </div>\r\n    )\r\n}\r\n","import { database } from './firebase';\r\n\r\nexport function allowDrop(e) {\r\n    e.preventDefault();\r\n    if (!e.target.classList.contains(\"tasks__items\") && !e.target.classList.contains(\"item\"))\r\n        e.dataTransfer.dropEffect = \"none\";\r\n    else\r\n        e.dataTransfer.dropEffect = \"all\";\r\n}\r\nexport function dragStart(e) {\r\n    e.dataTransfer.setData(\"text/html\", e.target.id);\r\n}\r\nexport function dropIt(e) {\r\n    e.preventDefault();\r\n    let sourceId = e.dataTransfer.getData(\"text/html\");\r\n    let sourceIdEl = document.getElementById(sourceId);\r\n    let sourceIdParentEl = sourceIdEl.parentElement;\r\n    let targetEl = document.getElementById(e.target.id)\r\n    let targetParentEl = targetEl.parentElement;\r\n\r\n    if (targetParentEl.id !== sourceIdParentEl.id) {\r\n        if (targetEl.className === sourceIdEl.className) {\r\n            database.collection('tasks').doc(sourceId).update({\r\n                type: targetParentEl.getAttribute('id')\r\n            });\r\n        } else {\r\n            database.collection('tasks').doc(sourceId).update({\r\n                type: targetEl.getAttribute('id')\r\n            });\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\r\nimport { dropIt, allowDrop, dragStart } from '../dragdrop';\r\n\r\nconst labels = {\r\n    \"Growth Experiment\": <span className='tasks__label tasks__label--red'>Growth Experiment</span>,\r\n    \"Marketing\": <span className='tasks__label tasks__label--purple'>Marketing</span>,\r\n    \"UI Design\": <span className='tasks__label tasks__label--green'>UI Design</span>\r\n}\r\n\r\nfunction openEditTaskForm(id, type, title, description, uiDesignLabel, marketingLabel, growthExperimentLabel) {\r\n    return function() {\r\n        document.getElementById('overlay').style.display = 'block';\r\n        document.getElementById('editTaskForm').style.display = 'flex';\r\n        document.getElementById('editTaskForm').hiddenId.value = id;\r\n        document.getElementById('editTaskForm').hiddenType.value = type;\r\n        document.getElementById('editTaskForm').title.value = title;\r\n        document.getElementById('editTaskForm').description.value = description;\r\n        document.getElementById('editTaskForm').growthExperimentLabel.checked = growthExperimentLabel ? 'checked' : '';\r\n        document.getElementById('editTaskForm').marketingLabel.checked = marketingLabel ? 'checked' : '';\r\n        document.getElementById('editTaskForm').uiDesignLabel.checked = uiDesignLabel ? 'checked' : '';\r\n    }\r\n\r\n}\r\n\r\nexport function TaskColumnItems({ type, tasks, openForm }) {\r\n    let a = tasks.map(el => {\r\n        if (el.type === type) {\r\n            return <li key={el.id}\r\n                id={el.id}\r\n                draggable=\"true\"\r\n                onDragStart={dragStart}>\r\n                <button onClick={openEditTaskForm(el.id, el.type, el.title, el.description, el.labels[0], el.labels[1], el.labels[2])}>\r\n                    <FontAwesomeIcon icon={faCog} color='black' />\r\n                </button>\r\n                <h1>{el.title}</h1>\r\n                <p>{el.description}</p>\r\n                {<div className='tasks__labels'>{el.labels.map((el) => el && labels[el])}</div>}\r\n            </li>\r\n        }\r\n    })\r\n\r\n    return (\r\n        <ul className={`tasks__items tasks__items--${type}`} id={type} onDrop={dropIt} onDragOver={allowDrop}>\r\n            {a}\r\n            <li>\r\n                <button onClick={openForm}\r\n                    id={`submit${type.charAt(0).toUpperCase() + type.slice(1)}Task`}>\r\n                    <span /><span />\r\n                </button>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { Masonry } from 'masonic';\nimport { database } from './firebase';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle, faSearch, faMapSigns, faLightbulb, faCog, faQuestionCircle, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\nimport { AddTaskForm } from './components/AddTaskForm';\nimport { EditTaskForm } from './components/EditTaskForm';\nimport { TaskColumnHeader } from './components/TaskColumnHeader';\nimport { TaskColumnItems } from './components/TaskColumnItems';\nimport './App.scss';\n\nfunction App() {\n    let [tasks, setTasks] = useState([]);\n    let [triggeredForm, setTriggeredForm] = useState('')\n\n    let openedCount = 0, selectedCount = 0, runningCount = 0, evaluatingCount = 0, liveCount = 0;\n\n    useEffect(() => {\n        database.collection(\"tasks\")\n            .onSnapshot(function(querySnapshot) {\n                let tasks = [];\n\n                querySnapshot.forEach(function(doc) {\n                    tasks.push(doc.data());\n                });\n\n                setTasks(tasks)\n            });\n    }, []);\n\n    for (let i = 0; i < tasks.length; i++) {\n        tasks[i].type === 'opened' && openedCount++;\n        tasks[i].type === 'selected' && selectedCount++;\n        tasks[i].type === 'running' && runningCount++;\n        tasks[i].type === 'evaluating' && evaluatingCount++;\n        tasks[i].type === 'live' && liveCount++;\n    }\n\n    function openForm(e) {\n        document.getElementById('overlay').style.display = 'block';\n        document.getElementById('addTaskForm').style.display = 'flex';\n        console.log(e.currentTarget.parentElement.classList)\n        if (e.currentTarget.parentElement.classList.contains('menu')) {\n            document.getElementById('addTaskForm').typeDropdown.style.display = 'block';\n            setTriggeredForm(e.currentTarget.parentElement.className)\n        } else {\n            document.getElementById('addTaskForm').typeDropdown.style.display = 'none';\n            setTriggeredForm(e.currentTarget.id)\n        }\n    }\n\n    function closeForm() {\n        const form = document.getElementById('addTaskForm');\n        const editForm = document.getElementById('editTaskForm');\n        form.reset();\n        editForm.reset();\n        form.style.display = 'none';\n        editForm.style.display = 'none';\n        document.getElementById('overlay').style.display = 'none';\n    }\n\n    function search() {\n        database.collection(\"tasks\")\n            .onSnapshot(function(querySnapshot) {\n                let tasks = [];\n                if (document.getElementById('searchInput').value.trim() !== \"\") {\n                    querySnapshot.forEach((el) => {\n                        if (el.data().title.includes(document.getElementById('searchInput').value.trim()) ||\n                            el.data().description.includes(document.getElementById('searchInput').value.trim()) ||\n                            el.data().labels.includes(document.getElementById('searchInput').value.trim())) {\n                            tasks.push(el.data())\n                        }\n                    })\n                } else {\n                    querySnapshot.forEach(function(doc) {\n                        tasks.push(doc.data());\n                    });\n                }\n                setTasks(tasks)\n            });\n    }\n\n    const MasonryCard = ({ data: { type, count, svg, tasks, openForm } }) => (\n        <div className='tasks'>\n            <TaskColumnHeader type={type} count={count} svg={svg} />\n            <TaskColumnItems type={type} tasks={tasks} openForm={openForm} />\n        </div>\n    )\n\n    return (\n        <div className=\"App\">\n            <div id='overlay' onClick={closeForm}></div>\n            <AddTaskForm triggeredForm={triggeredForm} closeForm={closeForm} />\n            <EditTaskForm closeForm={closeForm} />\n            <div className='menu'>\n                <FontAwesomeIcon icon={faPlusCircle} color='#00b8ff' style={{ marginRight: '10px' }} onClick={openForm} />\n                <FontAwesomeIcon icon={faSearch} color='#00b8ff' />\n                <input type='text' id='searchInput' placeholder='Search...' onChange={search} />\n            </div>\n            <div className='taskTypes'>\n                <Masonry items={[{\r\n                    type: 'opened',\n                    count: openedCount,\n                    svg: faLightbulb,\n                    tasks: tasks,\n                    openForm: openForm\r\n                },\n                {\r\n                    type: 'selected',\n                    count: selectedCount,\n                    svg: faMapSigns,\n                    tasks: tasks,\n                    openForm: openForm\r\n                },\n                {\r\n                    type: 'running',\n                    count: runningCount,\n                    svg: faCog,\n                    tasks: tasks,\n                    openForm: openForm\r\n                },\n                {\r\n                    type: 'evaluating',\n                    count: evaluatingCount,\n                    svg: faQuestionCircle,\n                    tasks: tasks,\n                    openForm: openForm\r\n                },\n                {\r\n                    type: 'live',\n                    count: liveCount,\n                    svg: faCheckCircle,\n                    tasks: tasks,\n                    openForm: openForm\r\n                }]} render={MasonryCard} columnWidth={250} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}